// <auto-generated />
using System;
using CustomerRegistration.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CustomerRegistration.Infrastructure.Migrations
{
    [DbContext(typeof(CustomerRegistrationContext))]
    [Migration("20230915104756_initial")]
    partial class initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CustomerRegistration.Domain.Models.Entities.ClassifiedAddress", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<string>("Classified")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Classified");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime")
                        .HasColumnName("CreateAt");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CustomerId");

                    b.Property<bool>("IsMain")
                        .HasColumnType("bit")
                        .HasColumnName("IsMain");

                    b.Property<DateTime?>("LastUpdate")
                        .HasColumnType("datetime")
                        .HasColumnName("LastUpdate");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("ClassifiedAdresses", (string)null);

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("CustomerRegistration.Domain.Models.Entities.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<string>("CellPhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CellPhone");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime")
                        .HasColumnName("CreateAt");

                    b.Property<DateTime?>("LastUpdate")
                        .HasColumnType("datetime")
                        .HasColumnName("LastUpdate");

                    b.Property<string>("MainEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("MainEmail");

                    b.Property<string>("RecoveryEmail")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("RecoveryEmail");

                    b.HasKey("Id");

                    b.ToTable("Customers", (string)null);

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("CustomerRegistration.Domain.Models.Entities.ClassifiedAddress", b =>
                {
                    b.HasOne("CustomerRegistration.Domain.Models.Entities.Customer", null)
                        .WithMany("ClassifiedAdresses")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("CustomerRegistration.Domain.Models.ValueObject.Address", "Address", b1 =>
                        {
                            b1.Property<Guid>("ClassifiedAddressId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("City");

                            b1.Property<string>("Complement")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Complement");

                            b1.Property<string>("Neighborhood")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Neighborhood");

                            b1.Property<long>("Number")
                                .HasColumnType("bigint")
                                .HasColumnName("Number");

                            b1.Property<string>("PostalCode")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("PostalCode");

                            b1.Property<string>("State")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("State");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Street");

                            b1.HasKey("ClassifiedAddressId");

                            b1.ToTable("ClassifiedAdresses");

                            b1.WithOwner()
                                .HasForeignKey("ClassifiedAddressId");
                        });

                    b.Navigation("Address")
                        .IsRequired();
                });

            modelBuilder.Entity("CustomerRegistration.Domain.Models.Entities.Customer", b =>
                {
                    b.OwnsOne("CustomerRegistration.Domain.Models.ValueObject.Name", "Name", b1 =>
                        {
                            b1.Property<Guid>("CustomerId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("First")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("FisrtName");

                            b1.Property<string>("Last")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("LastName");

                            b1.HasKey("CustomerId");

                            b1.ToTable("Customers");

                            b1.WithOwner()
                                .HasForeignKey("CustomerId");
                        });

                    b.Navigation("Name")
                        .IsRequired();
                });

            modelBuilder.Entity("CustomerRegistration.Domain.Models.Entities.Customer", b =>
                {
                    b.Navigation("ClassifiedAdresses");
                });
#pragma warning restore 612, 618
        }
    }
}
